
services:
  # Zookeeper para Kafka
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"

  # Kafka Broker
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper

  # Redis para caché de detección de fraude
  redis:
    image: redis
    container_name: redis
    restart: always
    ports:
      - "6379:6379"

  # PostgreSQL para Reclamos de Seguros
  postgres_reclamos:
    image: postgres
    container_name: postgres_reclamos
    restart: always
    environment:
      POSTGRES_USER: usuario_reclamos
      POSTGRES_PASSWORD: clave_reclamos
      POSTGRES_DB: bd_reclamos
    ports:
      - "5433:5432"
    volumes:
      - postgres_reclamos_data:/var/lib/postgresql/data

  # MySQL para Pagos
  mysql_pagos:
    image: mysql
    container_name: mysql_pagos
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root_pagos
      MYSQL_DATABASE: bd_pagos
      MYSQL_USER: usuario_pagos
      MYSQL_PASSWORD: clave_pagos
    ports:
      - "3307:3306"
    volumes:
      - mysql_pagos_data:/var/lib/mysql

  # MongoDB para Validación de Pólizas, Detección de Fraude y Auditoría
  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

volumes:
  postgres_reclamos_data:
  mysql_pagos_data:
  mongodb_data:
